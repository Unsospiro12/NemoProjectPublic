//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputSystems/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""User"",
            ""id"": ""50c31a31-3f46-41fc-9b45-20be16f9f641"",
            ""actions"": [
                {
                    ""name"": ""MouseDrag"",
                    ""type"": ""Value"",
                    ""id"": ""27b5cc5a-4f4f-408a-b6e0-2252e70500d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""696a13d2-f241-43db-b213-a577c8a54566"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""f0c0fd32-c4b1-4a8a-9a99-35f6460aa470"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReadyToAttack"",
                    ""type"": ""Button"",
                    ""id"": ""369fbdda-dac8-4c0f-930b-f93d22bb2045"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReadyToMove"",
                    ""type"": ""Button"",
                    ""id"": ""df45c9f4-3e16-46c6-8a5d-65332f29f6d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""d2ce5a0c-8f6a-41b8-a32a-186f7e104f17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraLock"",
                    ""type"": ""Button"",
                    ""id"": ""21ea55ab-7472-41c9-aa38-ad71092d6b0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraReset"",
                    ""type"": ""Button"",
                    ""id"": ""d5ff592e-63b2-4187-af0c-25441c35d904"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""00b19828-29bf-400e-a1eb-16b8f1e9302d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDoubleClick"",
                    ""type"": ""Button"",
                    ""id"": ""ff6c0f7f-c9be-4b2e-b846-ca4a069b39f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapDelay=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""c7bbdc1b-be9e-401d-864d-601d3bc8a90c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bfeee767-f230-4918-be93-64d417ed0ba4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & Mouse"",
                    ""action"": ""MouseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5de55a3-f65b-43d5-b097-f557f3631728"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""602e9349-ddde-4d90-84f2-bef4332966b3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3546afc-d9b3-47c4-9da3-8a15c0a9a210"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a8568e6-d677-4761-9423-9ab341ec9392"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a901158-1f85-4248-83f1-71aaa5d56706"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdcd27dc-08ff-4d80-a320-49564a8b87df"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70768f87-af43-418d-bbe1-e7098cc545a7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard & Mouse"",
                    ""action"": ""MouseDoubleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""145e3d4e-a5dc-492d-8fe2-e3f24fe52313"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8cf723e-a468-456b-88cb-a3fc62937c34"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e4ccad4b-d64a-4bbc-832e-cd3080c7bd97"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""933e0fcd-e517-4cbb-970d-bf2bfda38e31"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7a7eff98-ec83-44a4-bdee-c68d1df97a41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c9903d68-6b44-4c52-8b6d-a1c8ef6fcc74"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReadyToAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb34eada-cf9f-4dc2-858c-39151bc49cf7"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReadyToMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard & Mouse"",
            ""bindingGroup"": ""KeyBoard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // User
        m_User = asset.FindActionMap("User", throwIfNotFound: true);
        m_User_MouseDrag = m_User.FindAction("MouseDrag", throwIfNotFound: true);
        m_User_MouseLeftClick = m_User.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_User_MouseRightClick = m_User.FindAction("MouseRightClick", throwIfNotFound: true);
        m_User_ReadyToAttack = m_User.FindAction("ReadyToAttack", throwIfNotFound: true);
        m_User_ReadyToMove = m_User.FindAction("ReadyToMove", throwIfNotFound: true);
        m_User_Hold = m_User.FindAction("Hold", throwIfNotFound: true);
        m_User_CameraLock = m_User.FindAction("CameraLock", throwIfNotFound: true);
        m_User_CameraReset = m_User.FindAction("CameraReset", throwIfNotFound: true);
        m_User_MouseWheel = m_User.FindAction("MouseWheel", throwIfNotFound: true);
        m_User_MouseDoubleClick = m_User.FindAction("MouseDoubleClick", throwIfNotFound: true);
        m_User_CameraMove = m_User.FindAction("CameraMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // User
    private readonly InputActionMap m_User;
    private List<IUserActions> m_UserActionsCallbackInterfaces = new List<IUserActions>();
    private readonly InputAction m_User_MouseDrag;
    private readonly InputAction m_User_MouseLeftClick;
    private readonly InputAction m_User_MouseRightClick;
    private readonly InputAction m_User_ReadyToAttack;
    private readonly InputAction m_User_ReadyToMove;
    private readonly InputAction m_User_Hold;
    private readonly InputAction m_User_CameraLock;
    private readonly InputAction m_User_CameraReset;
    private readonly InputAction m_User_MouseWheel;
    private readonly InputAction m_User_MouseDoubleClick;
    private readonly InputAction m_User_CameraMove;
    public struct UserActions
    {
        private @PlayerInputActions m_Wrapper;
        public UserActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDrag => m_Wrapper.m_User_MouseDrag;
        public InputAction @MouseLeftClick => m_Wrapper.m_User_MouseLeftClick;
        public InputAction @MouseRightClick => m_Wrapper.m_User_MouseRightClick;
        public InputAction @ReadyToAttack => m_Wrapper.m_User_ReadyToAttack;
        public InputAction @ReadyToMove => m_Wrapper.m_User_ReadyToMove;
        public InputAction @Hold => m_Wrapper.m_User_Hold;
        public InputAction @CameraLock => m_Wrapper.m_User_CameraLock;
        public InputAction @CameraReset => m_Wrapper.m_User_CameraReset;
        public InputAction @MouseWheel => m_Wrapper.m_User_MouseWheel;
        public InputAction @MouseDoubleClick => m_Wrapper.m_User_MouseDoubleClick;
        public InputAction @CameraMove => m_Wrapper.m_User_CameraMove;
        public InputActionMap Get() { return m_Wrapper.m_User; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserActions set) { return set.Get(); }
        public void AddCallbacks(IUserActions instance)
        {
            if (instance == null || m_Wrapper.m_UserActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UserActionsCallbackInterfaces.Add(instance);
            @MouseDrag.started += instance.OnMouseDrag;
            @MouseDrag.performed += instance.OnMouseDrag;
            @MouseDrag.canceled += instance.OnMouseDrag;
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            @MouseRightClick.started += instance.OnMouseRightClick;
            @MouseRightClick.performed += instance.OnMouseRightClick;
            @MouseRightClick.canceled += instance.OnMouseRightClick;
            @ReadyToAttack.started += instance.OnReadyToAttack;
            @ReadyToAttack.performed += instance.OnReadyToAttack;
            @ReadyToAttack.canceled += instance.OnReadyToAttack;
            @ReadyToMove.started += instance.OnReadyToMove;
            @ReadyToMove.performed += instance.OnReadyToMove;
            @ReadyToMove.canceled += instance.OnReadyToMove;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @CameraLock.started += instance.OnCameraLock;
            @CameraLock.performed += instance.OnCameraLock;
            @CameraLock.canceled += instance.OnCameraLock;
            @CameraReset.started += instance.OnCameraReset;
            @CameraReset.performed += instance.OnCameraReset;
            @CameraReset.canceled += instance.OnCameraReset;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
            @MouseDoubleClick.started += instance.OnMouseDoubleClick;
            @MouseDoubleClick.performed += instance.OnMouseDoubleClick;
            @MouseDoubleClick.canceled += instance.OnMouseDoubleClick;
            @CameraMove.started += instance.OnCameraMove;
            @CameraMove.performed += instance.OnCameraMove;
            @CameraMove.canceled += instance.OnCameraMove;
        }

        private void UnregisterCallbacks(IUserActions instance)
        {
            @MouseDrag.started -= instance.OnMouseDrag;
            @MouseDrag.performed -= instance.OnMouseDrag;
            @MouseDrag.canceled -= instance.OnMouseDrag;
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
            @MouseRightClick.started -= instance.OnMouseRightClick;
            @MouseRightClick.performed -= instance.OnMouseRightClick;
            @MouseRightClick.canceled -= instance.OnMouseRightClick;
            @ReadyToAttack.started -= instance.OnReadyToAttack;
            @ReadyToAttack.performed -= instance.OnReadyToAttack;
            @ReadyToAttack.canceled -= instance.OnReadyToAttack;
            @ReadyToMove.started -= instance.OnReadyToMove;
            @ReadyToMove.performed -= instance.OnReadyToMove;
            @ReadyToMove.canceled -= instance.OnReadyToMove;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @CameraLock.started -= instance.OnCameraLock;
            @CameraLock.performed -= instance.OnCameraLock;
            @CameraLock.canceled -= instance.OnCameraLock;
            @CameraReset.started -= instance.OnCameraReset;
            @CameraReset.performed -= instance.OnCameraReset;
            @CameraReset.canceled -= instance.OnCameraReset;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
            @MouseDoubleClick.started -= instance.OnMouseDoubleClick;
            @MouseDoubleClick.performed -= instance.OnMouseDoubleClick;
            @MouseDoubleClick.canceled -= instance.OnMouseDoubleClick;
            @CameraMove.started -= instance.OnCameraMove;
            @CameraMove.performed -= instance.OnCameraMove;
            @CameraMove.canceled -= instance.OnCameraMove;
        }

        public void RemoveCallbacks(IUserActions instance)
        {
            if (m_Wrapper.m_UserActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUserActions instance)
        {
            foreach (var item in m_Wrapper.m_UserActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UserActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UserActions @User => new UserActions(this);
    private int m_KeyBoardMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardMouseScheme
    {
        get
        {
            if (m_KeyBoardMouseSchemeIndex == -1) m_KeyBoardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoard & Mouse");
            return asset.controlSchemes[m_KeyBoardMouseSchemeIndex];
        }
    }
    public interface IUserActions
    {
        void OnMouseDrag(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnReadyToAttack(InputAction.CallbackContext context);
        void OnReadyToMove(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnCameraLock(InputAction.CallbackContext context);
        void OnCameraReset(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
        void OnMouseDoubleClick(InputAction.CallbackContext context);
        void OnCameraMove(InputAction.CallbackContext context);
    }
}
